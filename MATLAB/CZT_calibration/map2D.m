% function reshapes and maps a pixel string of [16384,1] size onto physical
% LED matrix as it mounted
% P Kochkin, 2017

function im = map2D(pixel_string) 
% map 16384 pixels on 2D

pixel_addr = [
    1	034	109;
    2	038	121;
    3	041	115;
    4	042	127;
    5	039	124;
    6	049	118;
    7	055	114;
    8	061	110;
    9	068	019;
    10	074	015;
    11	085	011;
    12	094	007;
    13	078	010;
    14	084	004;
    15	087	014;
    16	089	020;
    17	036	113;
    18	040	125;
    19	045	119;
    20	047	128;
    21	035	122;
    22	051	116;
    23	057	112;
    24	063	108;
    25	066	017;
    26	072	013;
    27	083	009;
    28	092	005;
    29	080	001;
    30	082	006;
    31	086	012;
    32	088	018;
    33	030	117;
    34	026	111;
    35	043	123;
    36	037	126;
    37	044	120;
    38	053	104;
    39	059	077;
    40	64 	071;
    41	070	023;
    42	081	056;
    43	090	050;
    44	096	033;
    45	076	003;
    46	103	008;
    47	097	002;
    48	091	016;
    49	032	095;
    50	024	101;
    51	031	105;
    52	027	098;
    53	021	102;
    54	050	106;
    55	056	075;
    56	062	069;
    57	065	062;
    58	071	060;
    59	077	054;
    60	104	048;
    61	098	021;
    62	105	027;
    63	099	022;
    64	093	028;
    65	028	091;
    66	022	093;
    67	029	103;
    68	025	107;
    69	033	100;
    70	048	079;
    71	054	073;
    72	060	067;
    73	067	064;
    74	069	058;
    75	075	052;
    76	106	046;
    77	100	025;
    78	107	029;
    79	101	026;
    80	095	032;
    81	020	097;
    82	012	099;
    83	006	076;
    84	010	096;
    85	005	090;
    86	046	081;
    87	052	070;
    88	058	065;
    89	108	059;
    90	073	053;
    91	079	044;
    92	102	037;
    93	127	043;
    94	115	031;
    95	121	024;
    96	109	030;
    97	018	088;
    98	014	086;
    99	004	082;
    100	001	080;
    101	007	092;
    102	011	083;
    103	013	072;
    104	019	066;
    105	110	063;
    106	114	057;
    107	118	051;
    108	122	035;
    109	128	047;
    110	119	045;
    111	125	040;
    112	113	034;
    113	016	089;
    114	002	087;
    115	008	084;
    116	003	078;
    117	009	094;
    118	015	085;
    119	017	074;
    120	023	068;
    121	112	061;
    122	116	055;
    123	120	049;
    124	124	039;
    125	126	042;
    126	123	041;
    127	111	038;
    128	117	036;
    ];

% DAU_asic - 128 pixels in 32 asics
DAU_asic = zeros([128,32,4]);
for q = 1:4
    DAU_asic(1:128,1:32,q) = reshape(pixel_string(((q-1)*4096 + 1):q*4096),[128,32]);
end

% allocate space
DAU = zeros([64,64,4]);

% cut on DMs
for k = 1:4
chain = zeros(16,64);
for j = 1:4
    for i = 1:4
        chain(:,((i-1)*16 + 1):(i*16)) = [reshape(DAU_asic(pixel_addr(:,2),(i*2-1) + (j-1)*8,k),[16,8]), ...
                                          reshape(DAU_asic(pixel_addr(:,3),i*2+(j-1)*8,k),[16,8])];
    end
    DAU(((j-1)*16 + 1):(j*16),:,k) = chain; 
end
end

% to iluminate a pixel
% DAU(1:64,1:64,1) = 99999;
% DAU(1:64,1:64,2) = 99999;
% DAU(1:64,1:64,3) = 99999;
% DAU(1:64,1:64,4) = 99999;

% flipping and rotating magic
im(65:128,1:64) = flip(flip(DAU(:,:,1),2),1);
im(1:64,1:64) = flip(flip(DAU(:,:,2),2),1);
im(1:64,65:128) = DAU(:,:,4);
im(65:128,65:128) = DAU(:,:,3);

% as seen from earth
im = flip(im,2);



